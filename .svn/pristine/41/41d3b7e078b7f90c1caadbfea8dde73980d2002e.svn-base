/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package directory;

import files.Directory;
import files.File;

import java.util.ArrayList;

/**
 *
 * @author ehkasper
 */
public class DirectoryTree {
    
    private static ArrayList<Directory> tree = new ArrayList<>();
    private static DirectoryTree self; 
    private static Directory current;
    private static Directory virtualCurrent;
    private static Directory root;

    private DirectoryTree (Directory root) {
        DirectoryTree.current = root;
        DirectoryTree.virtualCurrent = root;
        DirectoryTree.root = root;
    }
    
    public static DirectoryTree createDirectoryTree (Directory root) {
        if (! (self instanceof DirectoryTree)) {
            self = new DirectoryTree(root);
            //adding root folder to the directory tree
            DirectoryTree.add(root);
        }

        return self;
    }

    public static DirectoryTree getDirectoryTree() {
        return self;
    }

    public static ArrayList<Directory> getTree() {
        return tree;
    }

    public static void setCurrent(Directory directory) {
        if (tree.contains(directory)) {
            virtualCurrent = directory;
            current = directory;
        }
    }

    public static Directory getCurrent() {
        return DirectoryTree.current;
    }

    public static void setVirtualCurrent(Directory directory) {
        virtualCurrent = directory;
    }

    public static Directory getVirtualCurrent() {
        return DirectoryTree.virtualCurrent;
    }

    public static void add(Directory directory) {
        tree.add(directory);
    }

    public static void remove(Directory directory) {
        tree.remove(directory);
    }

    public static ArrayList<Directory> getFoldersOn(Directory target) {
        ArrayList<Directory> directories = new ArrayList<>();
        for (Directory directory : tree) {
            if (directory.getParent() == target) {
                directories.add(directory);
            }
        }
        
        return directories;
    }

    public static ArrayList<Directory> getFoldersOnCurrent() {
        return getFoldersOn(current);
    }

    public static Directory findDirOn(Directory current, String directoryName) {
        for (Directory directory : tree) {
            if (directory.getParent() == current) {
                if (directory.getName().equals(directoryName)) {
                    return directory;
                }
            }
        }

        return null;
    }
    
/*****************************************************************************/
    public static Boolean setPath(String path) {
        if (DirectoryTree.pathExists(path)) {
            DirectoryTree.setCurrent(DirectoryTree.getVirtualCurrent());

            return true;
        }
        
        DirectoryTree.setVirtualCurrent(DirectoryTree.getCurrent());
        return false;
    }
    //checks if path exists and if it does it sets a virtual current directory
    public static Boolean pathExists(String path){
    	
    	//returns user to the root folder
    	if(path.equals("/")){
    		
    		Directory rt = DirectoryTree.findDirOn(null, "/");
    		DirectoryTree.setVirtualCurrent(rt);
    		return true;
    	}
    	
    	if (path.equals("..")){
    		Directory virtual = DirectoryTree.getVirtualCurrent();
        	Directory parent = virtual.getParent();
        	
        	if(parent == null){
        		return false;
        	}
        	
        	System.out.println("going to parent: " + parent.getName());
        	DirectoryTree.setVirtualCurrent(parent);
        	for (File c : parent.content){
        		System.out.println(c);
        	}
        	return true;
        }
    	
    	
	        
	        //Directory virtual = DirectoryTree.getVirtualCurrent();
	    	
	        //first index cases (ex. cd .., cd ./ ----)
	    
	        
	    //*************** FULL PATH *********************
	    if (path.startsWith("/")){
	    	DirectoryTree.setVirtualCurrent(DirectoryTree.findDirOn(null, "/"));
	    	path = path.substring(1);
	    	System.out.println("Path: " + path);
	    }
	    //else{
	    //	DirectoryTree.setVirtualCurrent(DirectoryTree.getVirtualCurrent());
	    //}
	    String[] directories = path.split("/");
	    
        for (String directory : directories) {
        	Directory virtual = DirectoryTree.getVirtualCurrent();
        	//handles double dot [parent DIR]
            if (directory.equals("..")) {
            	System.out.println(".. path");
                Directory parent = virtual.getParent();

                if (parent == null) {
                    return false;
                }
	
                DirectoryTree.setVirtualCurrent(parent);
            }
            //handles single dot [self DIR -- relative path]
            else if(directory.equals(".")){
            	//DirectoryTree.setVirtualCurrent(getVirtualCurrent());
            	System.out.println(" ./ path");
            	//do nothing (self)
            } 
       
            else {
                Directory currentDirectory;
                currentDirectory = DirectoryTree.findDirOn(virtual, directory);

                if (currentDirectory == null) {
                    return false;
                }

                DirectoryTree.setVirtualCurrent(currentDirectory);
                
            }
        }//for()
		        
    	
        return true;
        
    }
    
    
    public static void destroy () {
        self = null;
        tree = new ArrayList<>();
        current = null;
        virtualCurrent = null;
        
    }

}
